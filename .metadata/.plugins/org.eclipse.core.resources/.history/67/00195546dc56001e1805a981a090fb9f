package com.social.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.social.entities.Ricetta;
import com.social.entities.Utente;
import com.social.services.RicettaService;
import com.social.services.UtenteService;

@RestController
@RequestMapping("api")
public class UtenteREST {

	@Autowired
	private UtenteService service;

	@Autowired
	private RicettaService ricettaService;

	@GetMapping("utenti")
	List<Utente> lista() {
		return service.getAllUtenti();
	}

	@GetMapping("utenti/{id}")
	Utente utenteById(@PathVariable Long id) {
		return service.getUtenteById(id);
	}
	
	@GetMapping("utenti/search/by-nome")
	Utente utenteByNome(@RequestParam String nome) {
	    return service.findByNome(nome);
	}

	@GetMapping("utenti/search/by-cognome")
	Utente utenteByCognome(@RequestParam String cognome) {
	    return service.findByCognome(cognome);
	}

	@GetMapping("utenti/search/by-nome+cognome")
	Utente utenteByNomeAndCognome(@RequestParam String nome, @RequestParam String cognome) {
	    return service.findByNomeAndCognome(nome, cognome);
	}



	@PostMapping("utenti")
	Utente addUtente(@RequestBody Utente utente) {
		return service.addUtente(utente);
	}
	
	@DeleteMapping("utenti/{id}")
	public ResponseEntity<?> deleteUtente(@PathVariable Long id) {
	    service.deleteUtente(id);
	    return ResponseEntity.ok().body("{\"success\": true}");
	}



	@GetMapping("utenti/{id}/ricette")
	public List<Ricetta> getRicetteByUtente(@PathVariable Long id) {
		Utente utente = service.getUtenteById(id);
		if (utente != null) {
			return ricettaService.getRicettaByUtente(utente);
		}
		return new ArrayList<>(); // Utente non trovato, ritorna lista vuota
	}


	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody Utente utente) {
		
		String email = utente.getEmail();
		String password = utente.getPassword();

		// Verifica le credenziali di login nel servizio UtenteService
		if (service.verifyLogin(email, password)) {
			return ResponseEntity.ok().body("{\"success\": true}");
		} else {
			return ResponseEntity.ok().body("{\"success\": false}");
		}
	}
	
	@GetMapping("utenti/email/{email}")
	public ResponseEntity<Utente> utenteByEmail(@PathVariable String email) {
	    Utente utente = service.findByEmail(email);
	    if (utente != null) {
	        return ResponseEntity.ok(utente);
	    } else {
	        return ResponseEntity.notFound().build();
	    }
	}

}
